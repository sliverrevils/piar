"use client";

import React, { useCallback, useEffect, useMemo, useRef, useState } from "react";
import { Engine, Scene, SceneLoader, ArcRotateCamera, HemisphericLight, Vector3, AnimationGroup, PointerEventTypes, ArcRotateCameraPointersInput, StandardMaterial, Color3, PBRMaterial, Texture, AbstractMesh, HDRCubeTexture, MeshBuilder, Mesh } from "@babylonjs/core";
import "@babylonjs/loaders";
import { createMaterial, texturesAll, TexturesAllKeys } from "./materials";
import Image from "next/image";
import ColorPicker from "../../common/ColorPicker/ColorPicker";
import styles from "./babylon.module.scss";
import { getAnimationText } from "./animationsInfo";
import { setCameraToSceneBounds } from "../../../../../utils/babyloneUtils";
import {} from "@heroicons/react";
import { CubeTransparentIcon } from "@heroicons/react/24/outline";
import { Cog6ToothIcon } from "@heroicons/react/24/outline";
import { XCircleIcon } from "@heroicons/react/24/outline";
import { ChevronDoubleRightIcon } from "@heroicons/react/24/outline";
import { ChevronDoubleLeftIcon } from "@heroicons/react/24/outline";

// –í –∏–º–µ–Ω–∏ –º—ç—à–∞ –¥–æ # –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—ë –∞–Ω–∏–º–∞—Ü–∏–∏ (mech#1  - –∑–Ω–∞—á–∏—Ç –∞–Ω–∏–º–∞—Ü–∏—è mech) - –º—ç—à –Ω–∞–∑—ã–≤–∞–µ–º –¥–æ # –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä–∞—è –∏–≥—Ä–∞–µ—Ç –ø–æ –∫–ª–∏–∫—É –Ω–∞ –º—ç—à (—Ç.–∫. –º—ç—à–µ–π –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ –≤ –æ–¥–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏)
// –¢–µ–∫—Å—Ç—É—Ä—ã base_1, base_2 ... –¥–ª—è —Å–º–µ–Ω—ã
// –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ playedAnimsRef (—á—Ç–æ –±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∏–≥—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é) –∏ –≤ —Å—Ç—ç–π—Ç–µ playedAnimations (—Å—Ç—ç–π—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ HTML)

//–¶–µ–Ω—Ç—Ä –∫–∞–º–µ—Ä—ã –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –≤—Å–µ—Ö –º—ç—à–µ–π (–≤–Ω–µ—à–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏)
const BabylonModelWithAnimation: React.FC<{
    modelPath: string;
    hdrPath?: string;
    baseFone?: boolean;
    roomPath?: string;
    base1Material?: TexturesAllKeys;
    base2Material?: TexturesAllKeys;
    base3Material?: TexturesAllKeys;
    initColor?: string;
}> = ({ modelPath, hdrPath, baseFone = false, roomPath, base1Material, base2Material, base3Material, initColor }) => {
    const canvasRef = useRef<HTMLCanvasElement>(null);
    const sceneRef = useRef<Scene | null>(null);
    const playedAnimsRef = useRef<string[]>([]); //! –µ—â–µ —Ä–∞–∑ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ —Ä–µ—Ñ , –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Ç—ç–π—Ç –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–∞–Ω–≤–∞—Å–∞
    const [playedAnimations, setPlayedAnimations] = useState<string[]>([]); //! –∞ —Ç—É—Ç –≤—Å–µ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ HTML
    const isDelegation = useRef<boolean>(false);
    const [animationGroups, setAnimationGroups] = useState<AnimationGroup[]>([]);
    const [selectedAnimation, setSelectedAnimation] = useState<string | null>(null);
    //const [playedAnims, setPlayedAnims] = useState<string[]>([]);
    const engineRef = useRef<Engine | null>(null);
    const [meshesArr, setMeshesArr] = useState<AbstractMesh[]>([]);

    const [baseColor, setBaseColor] = useState<Color3>(Color3.FromHexString(initColor || "#ffffff"));

    const [fullScreen, setFullscreen] = useState(false);
    const [isAnimPanel, setIsAnimPanel] = useState(false);

    //! –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
    const winResize = () => engineRef.current && engineRef.current.resize();

    //! –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    const playAnimation = (animationName: string) => {
        console.log("üîÑÔ∏è", playedAnimations);
        // console.log(playedAnimsRef.current);
        if (!sceneRef.current || !sceneRef.current.animationGroups.length) return;
        const { animationGroups } = sceneRef.current;

        //animationGroups.forEach((anim) => anim.stop()); //all stop
        const selected = animationGroups.find((anim) => anim.name === animationName);
        if (selected) {
            if (playedAnimsRef.current.includes(animationName)) {
                selected.speedRatio = -1;
                playedAnimsRef.current = [...playedAnimsRef.current.filter((animName) => animName !== animationName)];
                setPlayedAnimations((state) => [...state.filter((animName) => animName !== animationName)]);
            } else {
                selected.speedRatio = 1;
                playedAnimsRef.current = [...playedAnimsRef.current, animationName];
                setPlayedAnimations((state) => [...state, animationName]);
            }
            // console.log(`playedAnims`, playedAnimsRef.current);
            selected.play(false);
        }
    };

    //!–°–º–µ–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∏–º–µ–Ω–∏
    const changeMaterialByName = useCallback(
        ({ targetMaterialName, materialKey, changeColor = false }: { targetMaterialName: string; materialKey: TexturesAllKeys; changeColor?: boolean }) => {
            const newMaterial = createMaterial({ scene: sceneRef.current!, textureName: materialKey, materialName: targetMaterialName, baseColor: changeColor ? baseColor : undefined });
            meshesArr.forEach((mesh) => {
                if (mesh.material && mesh.material.name === targetMaterialName) {
                    mesh.material = newMaterial;
                }
            });
        },
        [meshesArr, baseColor]
    );
    //! –°–º–µ–Ω–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
    const changeMaterialColor = ({ targetMaterialName, newColor }: { targetMaterialName: string; newColor: Color3 }) => {
        meshesArr
            .filter((mesh) => mesh.material?.name === targetMaterialName)
            .forEach(({ material }) => {
                //console.log(material);
                if (material) {
                    (material as PBRMaterial).albedoColor = newColor;
                }
            });
    };

    //TODO –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ
    if (sceneRef.current && !isDelegation.current) {
        isDelegation.current = true;
        // —á—Ç–æ –±—ã –Ω–µ —Å—Ä–æ–±–∞—Ç—ã–≤–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–º –∫–ª–∏–∫–µ –∏–ª–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã
        let hit: string = "";
        let timeout: NodeJS.Timeout | undefined;
        sceneRef.current.onPointerObservable.add((pointerInfo) => {
            if (pointerInfo.type === PointerEventTypes.POINTERDOWN) {
                const mesh = pointerInfo.pickInfo?.pickedMesh;
                timeout && clearTimeout(timeout);
                if (mesh) {
                    hit = mesh.name;
                    timeout = setTimeout(() => {
                        hit = "";
                    }, 300);
                }
            }
            if (pointerInfo.type === PointerEventTypes.POINTERUP) {
                // console.log(pointerInfo);
                const mesh = pointerInfo.pickInfo?.pickedMesh;
                if (mesh) {
                    const animName = mesh.name.split("#")[0];
                    // console.log(animName, playAnimation);
                    if (hit === mesh.name) playAnimation(animName);
                }
            }
        });
    }

    //–ì–ª–∞–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    useEffect(() => {
        if (!canvasRef.current || sceneRef.current) return;

        //! –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ Babylon.js
        const engine = new Engine(canvasRef.current, true, { alpha: true });
        engineRef.current = engine;

        //! –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É
        const scene = new Scene(engine);
        sceneRef.current = scene;

        //–§–æ–Ω c –ø–æ–ª–æ–º
        if (baseFone) {
            scene.createDefaultEnvironment();
        }

        //! –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É
        const camera = new ArcRotateCamera(
            "camera",
            Math.PI / 1.6, // –£–≥–æ–ª –≤—Ä–∞—â–µ–Ω–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            Math.PI / 2.5, // –£–≥–æ–ª –≤—Ä–∞—â–µ–Ω–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            3, // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã –¥–æ —Ü–µ–ª–∏
            new Vector3(0, 0.5, 0), // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ (—Å–º–µ—Å—Ç–∏–ª–∏ –≤–Ω–∏–∑)
            scene
        );

        camera.wheelDeltaPercentage = 0.01; // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–æ–ª–ª –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–º
        camera.pinchDeltaPercentage = 0.01; // –î–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –ø—Ä–∏ –∂–µ—Å—Ç–∞—Ö
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
        camera.wheelPrecision = 100; // –ú—è–≥–∫–æ—Å—Ç—å –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        camera.wheelDeltaPercentage = 0.01; // –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
        camera.inertia = 0.8; // –ò–Ω–µ—Ä—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        // camera.lowerRadiusLimit = 3;
        // camera.upperRadiusLimit = 7;

        camera.upperBetaLimit = Math.PI / 2; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥) // –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å —Å–Ω–∏–∑—É

        camera.attachControl(canvasRef.current, true);

        //! –ù–∞–∑–Ω–∞—á–∞–µ–º HDR –∫–∞–∫ —Ç–µ–∫—Å—Ç—É—Ä—É –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (hdrPath) {
            const hdrTexture = new HDRCubeTexture(hdrPath, scene, 512);
            scene.environmentTexture = hdrTexture;

            // –°–∫–∞–π–±–æ–∫—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è HDR-—Ñ–æ–Ω–∞
            const skybox = MeshBuilder.CreateBox("skyBox", { size: 100 }, scene);
            const skyboxMaterial = new StandardMaterial("skyBoxMaterial", scene);
            skyboxMaterial.backFaceCulling = false; // –í–∫–ª—é—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã
            skyboxMaterial.reflectionTexture = hdrTexture; // –ò—Å–ø–æ–ª—å–∑—É–µ–º HDR –∫–∞–∫ —Ç–µ–∫—Å—Ç—É—Ä—É
            skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Å–∫–∞–π–±–æ–∫—Å–∞
            skybox.material = skyboxMaterial;

            scene.environmentIntensity = 0.1; // –£–º–µ–Ω—å—à–∞–µ—Ç —è—Ä–∫–æ—Å—Ç—å HDR-–æ—Å–≤–µ—â–µ–Ω–∏—è
        }

        //! –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç
        new HemisphericLight("light", new Vector3(0, 1, 0), scene);

        //! –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        SceneLoader.ImportMesh("", "", modelPath, scene, (meshes, particleSystems, skeletons, animGroups) => {
            setCameraToSceneBounds(scene, camera);

            console.log("Model loaded with animations", animGroups);

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
            animGroups.forEach((anim) => anim.stop());
            setAnimationGroups(animGroups); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ state
            // console.log("Meshes ü§ñ", scene.meshes);
            setMeshesArr(scene.meshes);

            //–º–µ–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π
            if (base1Material) {
                const newMaterial = createMaterial({
                    scene: sceneRef.current!,
                    textureName: base1Material,
                    materialName: "base_1",
                    baseColor: initColor ? Color3.FromHexString(initColor) : undefined,
                    // baseColor: changeColor ? baseColor : undefined
                });
                meshes.forEach((mesh) => {
                    if (mesh.material && mesh.material.name === "base_1") {
                        mesh.material = newMaterial;
                    }
                });
            }
            if (base2Material) {
                const newMaterial = createMaterial({
                    scene: sceneRef.current!,
                    textureName: base2Material,
                    materialName: "base_2",
                    // baseColor: changeColor ? baseColor : undefined
                });
                meshes.forEach((mesh) => {
                    if (mesh.material && mesh.material.name === "base_2") {
                        mesh.material = newMaterial;
                    }
                });
            }
            if (base3Material) {
                const newMaterial = createMaterial({
                    scene: sceneRef.current!,
                    textureName: base3Material,
                    materialName: "base_3",
                    // baseColor: changeColor ? baseColor : undefined
                });
                meshes.forEach((mesh) => {
                    if (mesh.material && mesh.material.name === "base_3") {
                        mesh.material = newMaterial;
                    }
                });
            }
        });
        //! –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        if (roomPath) {
            SceneLoader.ImportMesh("", "", roomPath, scene);
        }

        // //TODO –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ

        //TODO —Å–º–µ–Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã
        let baseMaterial = scene.getMaterialByName("base_1") as StandardMaterial;
        if (baseMaterial) {
            const standartMaterial = new StandardMaterial("standartMaterial", scene);
            baseMaterial.diffuseColor = new Color3(1, 0, 0);
        }

        //! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ —Å—Ü–µ–Ω—ã
        if (!hdrPath) {
            //–µ—Å–ª–∏ –Ω–µ—Ç HDR
            scene.clearColor.set(0, 0, 0, 0); // RGBA (0,0,0,0) ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        }

        //! –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
        engine.runRenderLoop(() => {
            scene.render();
        });

        //! –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        window.addEventListener("resize", winResize);

        //! –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ canvas
        const disableScroll = (event: WheelEvent) => {
            event.preventDefault(); // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        };
        canvasRef.current.addEventListener("wheel", disableScroll);

        //! –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            window.removeEventListener("resize", winResize);
            canvasRef.current?.removeEventListener("resize", winResize);
            scene.dispose();
            engine.dispose();
        };
    }, []);

    //–≠—Ñ—Ñ–µ–∫—Ç —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–∞
    useEffect(() => {
        //console.log("Change to", baseColor);
        changeMaterialColor({ targetMaterialName: "base_1", newColor: baseColor });
    }, [baseColor]);

    //–≠—Ñ—Ñ–µ–∫—Ç —Ä–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ (—á—Ç–æ –±—ã –º–æ–¥–µ–ª—å –±—ã–ª–∞ —á–µ—Ç–∫–∞—è)
    useEffect(() => {
        winResize();
        document.body.style.overflow = fullScreen ? "hidden" : "auto";
    }, [fullScreen]);

    //!MEMOS
    //animations block
    const animationBlockMemo = useMemo(() => {
        return (
            fullScreen && (
                <div className={styles.animationsBlock}>
                    <div className={styles.animBlockBtn} onClick={() => setIsAnimPanel((state) => !state)}>
                        <Cog6ToothIcon width={20} height={20} />
                        {isAnimPanel ? <ChevronDoubleLeftIcon width={20} /> : <ChevronDoubleRightIcon width={20} />}
                    </div>

                    {animationGroups.map((animation) => (
                        <div key={animation.name + "_anim"} className={`${styles.animationItem} ${playedAnimations.includes(animation.name) ? styles.animationPlayed : ""} ${isAnimPanel ? "" : styles.animationItemClosed}`} onClick={() => playAnimation(animation.name)}>
                            <span>{getAnimationText({ animationName: animation.name, played: playedAnimations.includes(animation.name) })}</span>
                        </div>
                    ))}
                </div>
            )
        );
    }, [animationGroups, playedAnimations, isAnimPanel, fullScreen]);

    //full screen button
    const fullScreenBtnMemo = useMemo(() => {
        return (
            <div className={styles.fullScreenBtn} onClick={() => setFullscreen((state) => !state)}>
                <div className={styles.text}>{fullScreen ? "" : "–ù–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω"}</div>
                {fullScreen ? <XCircleIcon width={30} height={30} /> : <CubeTransparentIcon width={25} height={25} />}
            </div>
        );
    }, [fullScreen]);

    //material block HTML
    const materialsBlockMemo = useMemo(() => {
        return (
            fullScreen && (
                <div className={styles.materialPanel}>
                    {/* <select onChange={(e) => playAnimation(e.target.value)} value={selectedAnimation || ""} style={{ padding: "5px", fontSize: "1rem" }}>
                    <option value="" disabled>
                        –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–∞—Ü–∏—é
                    </option>
                    {animationGroups.map((anim) => (
                        <option key={anim.name} value={anim.name}>
                            {anim.name}
                        </option>
                    ))}
                </select> */}

                    <div className={styles.materialBlock}>
                        <div className={styles.title}>–û–±–∏–≤–∫–∞</div>
                        <div className={styles.materialsList}>
                            {texturesAll
                                .filter((textItem) => [...textItem.forTarget].includes("base_1"))
                                .map((textureItem) => (
                                    <div key={textureItem.name} className={styles.materialItem} onClick={() => changeMaterialByName({ targetMaterialName: "base_1", materialKey: textureItem.name, changeColor: true })}>
                                        <div className={styles.imgWrap}>
                                            <Image src={textureItem.texture} alt="key" width={300} height={300} />
                                        </div>
                                        <div className={styles.materialName}>{textureItem.name}</div>
                                        <div className={styles.materialAboutBlock}>
                                            <div className={styles.name}>{textureItem.name}</div>
                                            <Image src={textureItem.texture} alt="key" width={300} height={300} />
                                            <div className={styles.aboutText}>{textureItem.about}</div>
                                        </div>
                                    </div>
                                ))}
                        </div>
                    </div>
                    <div className={styles.materialBlock}>
                        <div className={styles.title}>–í–Ω–µ—à–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª</div>
                        <div className={styles.materialsList}>
                            {texturesAll
                                .filter((textItem) => [...textItem.forTarget].includes("base_2"))
                                .map((textureItem) => (
                                    <div key={textureItem.name} className={styles.materialItem} onClick={() => changeMaterialByName({ targetMaterialName: "base_2", materialKey: textureItem.name })}>
                                        <div className={styles.imgWrap}>
                                            <Image src={textureItem.texture} alt="key" width={300} height={300} />
                                        </div>
                                        <div className={styles.materialName}>{textureItem.name}</div>
                                        <div className={styles.materialAboutBlock}>
                                            <div className={styles.name}>{textureItem.name}</div>
                                            <Image src={textureItem.texture} alt="key" width={300} height={300} />
                                            <div className={styles.aboutText}>{textureItem.about}</div>
                                        </div>
                                    </div>
                                ))}
                        </div>
                    </div>
                    <div className={styles.materialBlock}>
                        <div className={styles.title}>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª</div>
                        <div className={styles.materialsList}>
                            {texturesAll
                                .filter((textItem) => [...textItem.forTarget].includes("base_3"))
                                .map((textureItem) => (
                                    <div key={textureItem.name} className={styles.materialItem} onClick={() => changeMaterialByName({ targetMaterialName: "base_3", materialKey: textureItem.name })}>
                                        <div className={styles.imgWrap}>
                                            <Image src={textureItem.texture} alt="key" width={300} height={300} />
                                        </div>
                                        <div className={styles.materialName}>{textureItem.name}</div>
                                        <div className={styles.materialAboutBlock}>
                                            <div className={styles.name}>{textureItem.name}</div>
                                            <Image src={textureItem.texture} alt="key" width={300} height={300} />
                                            <div className={styles.aboutText}>{textureItem.about}</div>
                                        </div>
                                    </div>
                                ))}
                        </div>
                    </div>
                </div>
            )
        );
    }, [fullScreen]);

    //colorPicker block HTML
    const colorPickerMemo = useMemo(() => {
        return (
            fullScreen && (
                <div className={styles.colorPickerBlock}>
                    <ColorPicker setBaseColor={setBaseColor} initColor={initColor} />
                </div>
            )
        );
    }, [fullScreen]);
    return (
        <div className={`${styles.babyloneMainWrap} ${fullScreen ? styles.babyloneFullScreen : ""}`}>
            <canvas ref={canvasRef} />
            {colorPickerMemo}
            {animationBlockMemo}
            {fullScreenBtnMemo}
            {materialsBlockMemo}
        </div>
    );
};

export default BabylonModelWithAnimation;
